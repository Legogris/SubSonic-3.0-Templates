<#@ include file="Settings.ttinclude" #>
<#@ assembly name="MySql.Data" #>
<#@ import namespace="MySql.Data.MySqlClient" #>
<#+
MySqlConnection conn;

string[] GetSPList()
{
    var result=new List<SPParam>();
	const string sql = "SELECT routine_name FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = ?databaseName";
	StringBuilder sList = new StringBuilder();

	using(conn=new MySqlConnection(ConnectionString))
	{
		MySqlCommand cmd = new MySqlCommand(sql, conn);
		cmd.Parameters.AddWithValue("?databaseName", DatabaseName);
		conn.Open();
		using(IDataReader rdr = cmd.ExecuteReader(CommandBehavior.CloseConnection))
		{
			bool isFirst = true;
			while(rdr.Read())
			{
				if(!isFirst)
					sList.Append('|');

				isFirst = false;
				sList.Append(rdr[0]);
			}
			
			rdr.Close();
		}
	}
	
	return sList.ToString().Split(new char[] {'|'}, StringSplitOptions.RemoveEmptyEntries);
}

List<SPParam> GetSPParams(string spName)
{
	var result=new List<SPParam>();
	MySqlCommand cmd = new MySqlCommand();
	using(conn=new MySqlConnection(ConnectionString))
	{
		conn.Open();
		cmd.Connection = conn;
		cmd.CommandText = spName;
		cmd.CommandType = CommandType.StoredProcedure;

		try
		{
			MySqlCommandBuilder.DeriveParameters(cmd);
		}
		catch
		{
			//string foo = ex.Message;
		}

		if(cmd.Parameters.Count > 0)
		{
			foreach(MySqlParameter param in cmd.Parameters)
			{
				SPParam p = new SPParam();
				p.SysType = GetSysType(param.MySqlDbType.ToString());
				p.DbType = param.DbType.ToString();
				p.Name = param.ParameterName;
				p.CleanName=CleanUp(p.Name);
				result.Add(p);
			}
		}
	}

	return result;
}

List<SP> GetSPs(){
    var result=new List<SP>();
	string[] spNames = GetSPList();
	
    foreach(string spName in spNames){
	    var sp=new SP();
	    sp.Name=spName;
		sp.CleanName=CleanUp(sp.Name);
		sp.Parameters=GetSPParams(sp.Name);
		result.Add(sp);        
    }
    
    return result;
}


List<FKTable> LoadFKTables(string tableName){
    string fkSQL=@"SELECT*
        FROM information_schema.KEY_COLUMN_USAGE
        WHERE
        (REFERENCED_TABLE_SCHEMA = (@schema)
        AND REFERENCED_TABLE_NAME =@table
        AND TABLE_NAME is not null
        )
        OR
        (TABLE_SCHEMA = (@schema)
        AND TABLE_NAME =@table
        AND REFERENCED_TABLE_NAME is not null
        )
        ORDER BY TABLE_NAME, COLUMN_NAME;";
    
    var result=new List<FKTable>();
    
    using(conn=new MySqlConnection(ConnectionString)){
        
        var cmd=new MySqlCommand(fkSQL,conn);
        cmd.Parameters.AddWithValue("@table",tableName);
        cmd.Parameters.AddWithValue("@schema",DatabaseName);
        conn.Open();
        var rdr=cmd.ExecuteReader(CommandBehavior.CloseConnection);
        
        while(rdr.Read()){
            FKTable fk=new FKTable();
            string thisTable=rdr["TABLE_NAME"].ToString();
            
            if(tableName.ToLower()==thisTable.ToLower()){
                fk.ThisTable=rdr["TABLE_NAME"].ToString();
                fk.ThisColumn=rdr["COLUMN_NAME"].ToString();
                fk.OtherTable=rdr["REFERENCED_TABLE_NAME"].ToString();
                fk.OtherColumn=rdr["REFERENCED_COLUMN_NAME"].ToString();
            
            }else{
                fk.ThisTable=rdr["REFERENCED_TABLE_NAME"].ToString();
                fk.ThisColumn=rdr["REFERENCED_COLUMN_NAME"].ToString();
                fk.OtherTable=rdr["TABLE_NAME"].ToString();
                fk.OtherColumn=rdr["COLUMN_NAME"].ToString();
          
            }
            
            fk.OtherClass=Inflector.MakeSingular(CleanUp(fk.OtherTable));
            fk.OtherQueryable=Inflector.MakePlural(fk.OtherClass);
            
            result.Add(fk);
        }
        
    
    }    

    return result;
    
    
}


List<Table> LoadTables(){

    var result=new List<Table>();
    
    using(conn=new MySqlConnection(ConnectionString)){
             
        conn.Open();
        
        //this will return everything for the DB
        var schema  = conn.GetSchema("COLUMNS");
        conn.Close();
        
        //spin through once to get all the tables
        foreach (DataRow row in schema.Rows)
        {
            if(!result.Any(x=>x.Name.Equals(row["TABLE_NAME"].ToString(),StringComparison.InvariantCultureIgnoreCase)))
            {

                //add it
                Table tbl = new Table();
                tbl.PrimaryKey="";
                tbl.Name = row["TABLE_NAME"].ToString();
                tbl.FKTables=LoadFKTables(tbl.Name);
                tbl.CleanName=CleanUp(tbl.Name);
                tbl.ClassName=Inflector.MakeSingular(tbl.CleanName);
                tbl.QueryableName=Inflector.MakePlural(tbl.ClassName);
                result.Add(tbl);
            }
        }
        
        //loop again - but this time pull by table name
        foreach (var item in result) {
            item.Columns=new List<Column>();
            //pull the columns from the schema
            var columns = schema.Select("TABLE_NAME='" + item.Name + "'");

            foreach (var row in columns) {
                Column col=new Column();
                col.Name=row["COLUMN_NAME"].ToString();
                col.CleanName=CleanUp(col.Name);
                col.DataType=row["DATA_TYPE"].ToString();
                
                col.SysType=GetSysType(col.DataType);
                col.DbType=GetDbType(col.DataType);
                
                col.AutoIncrement=row["EXTRA"].ToString()=="auto_increment";
                col.IsNullable=row["IS_NULLABLE"].ToString()=="YES";
                col.IsPK=row["COLUMN_KEY"].ToString()=="PRI";
                
                if(col.IsPK){
                    item.PrimaryKey=col.Name ?? "";
                }
                
                int.TryParse(row["CHARACTER_MAXIMUM_LENGTH"].ToString(),out col.MaxLength);
                
                item.Columns.Add(col);
            
            }
        }
        
    }
        

    return result;
}

string GetSysType(string sqlType){
	string sysType="string";
	switch (sqlType) {
		case "bigint":
			sysType= "long";
			break;
		case "byte":
			sysType = "byte";
			break;
		case "int":
			sysType= "int";
			break;
		case "smallint":
			sysType= "short";
			break;
		case "guid":
			sysType=  "Guid";
			 break;
		case "smalldatetime":
		case "date":
		case "datetime":
		case "timestamp":
			sysType=  "DateTime";
			  break;
		case "float":
			sysType="double";
			break;
		case "real":
		case "numeric":
		case "smallmoney":
		case "decimal":
		case "money":
			sysType=  "decimal";
			 break;
		case "tinyint":
		case "bit":
			sysType=  "bool";
			   break;
		case "image":
		case "binary":
		case "varbinary":
			sysType=  "byte[]";
			 break;
	}
	return sysType;
}
DbType GetDbType(string sqlType){
	switch(sqlType)
    {
        case "varchar":
            return DbType.AnsiString;
        case "nvarchar":
            return DbType.String;
        case "integer":
            return DbType.Int32;
        case "guid":
            return DbType.Guid;
        case "date":
        case "timestamp":
        case "datetime":
            return DbType.DateTime;
        case "bigint":
            return DbType.Int64;
        case "binary":
            return DbType.Binary;
        case "bit":
            return DbType.Boolean;
        case "char":
            return DbType.AnsiStringFixedLength;
        case "decimal":
            return DbType.Decimal;
        case "float":
            return DbType.Double;
        case "image":
            return DbType.Binary;
        case "money":
            return DbType.Currency;
        case "nchar":
            return DbType.String;
        case "longtext":
            return DbType.String;
        case "numeric":
            return DbType.Decimal;
        case "real":
            return DbType.Single;
        case "smalldatetime":
            return DbType.DateTime;
        case "smallint":
            return DbType.Int16;
        case "smallmoney":
            return DbType.Currency;
        case "sql_variant":
            return DbType.String;
        case "sysname":
            return DbType.String;
        case "text":
            return DbType.AnsiString;
        case "tinyint":
            return DbType.Byte;
        case "varbinary":
            return DbType.Binary;
        default:
            return DbType.AnsiString;
    }

}
#>